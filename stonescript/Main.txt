// import DPSMeter

// Weapon setups
// D Wands
var vigorWands = [
  "vigor wand D +11", 
  "vigor wand D +12"]
var aetherWands = [
  "aether wand D +12", 
  "aether wand D +10"]
var fireWands = [
  "fire wand D +11", 
  "fire wand D +10"]
var iceWands = [
  "ice wand D +8", 
  "ice wand D +7"]
var poisonWands = [
  "poison wand D +8", 
  "poison wand D +7"]

// Effect Wands
var chillWands = [
  "ice wand dI +11", 
  "ice wand dI +8"]

// Hammers
var armorHammers = [
  "poison hammer D",
  "ice hammer D"]
var stunlock = [
  "stone hammer +9", 
  "aether hammer"]

// Effect Swords
var unmakeSwords = [
  "aether sword dU +10", 
  "aether sword dU +9"]
var chillSwords = [
  "ice sword dI shiny", 
  "ice sword dI -shiny"]
var healingSwords = [
  "vigor sword dL +16",
  "vigor sword dL +11"]

// D Swords
var poisonSwords = [
  "poison sword D +10", 
  "poison sword D +8"]
var iceSwords = [
  "ice sword D +9", 
  "ice sword D +8"]
var fireSwords = [
  "fire sword D shiny", 
  "fire sword D -shiny"]
var vigorSwords = [
  "vigor sword D shiny", 
  "vigor sword D -shiny"]
var aetherSwords = [
  "aether sword D +11", 
  "aether sword D +9"]

var stoneSwords = [
  "stone sword +15",
  "stone sword +14"]

var elementalSwordDict = [
  ["ice", iceSwords],
  ["fire", fireSwords],
  ["poison", poisonSwords],
  ["aether", aetherSwords],
  ["vigor", vigorSwords],
]

// Data vars
var allAbilities = [
  "mind","hammer","bardiche","blade",
  "skeleton_arm","mask","fire_talisman",
  "cinderwisp","quarterstaff","dash","bash",
]
var abilityHUDNames = [
  "mind","ham","bard", "bfg","arm","mask",
  "tali","wisp","qtr","dash","bash"
]

// Globals
var hasEncountedBoss = false
var shouldPermaPot = false
var canChill
canChill = CanApplyDebuf("debuff_chill")
var canPoison
canPoison = CanApplyDebuf("debuff_damage")
var aiState = 0
var loopCount = 0

var foeDebuffs
foeDebuffs = foe.debuffs.string

var smiteStack = 0
smiteStack = buffs.GetCount("smite")

func ResetGlobals()
  hasEncountedBoss = false
  aiState = 0
  
// Find weak rune to use later
var weakRune = stone
?foe = vigor
  weakRune = poison
?foe = poison
  weakRune = ice
?foe = ice
  weakRune = fire
?foe = fire
  weakRune = aether
?foe = aether
  weakRune = vigor

// Helper Functions
func Between(value, min, max)
  return value >= min & value <= max

func ItemCD(itemName)
  return item.GetCooldown(itemName)

func CanUse(itemName)
  return item.CanActivate(itemName)

func CanUseItem()
  return item.CanActivate()

func FormatTime(timeVal)
  return time.FormatCasual(timeVal)

func FoeWithin(val)
  // enemies can be behind sometimes
  return FoeBetween(0, val)

func FoeBetween(min, max)
  return foe.distance >= min &
  ^foe.distance <= max

func PotionIs(pot)
  return item.potion = pot

func HasBerserk()
  return buffs.GetCount("berserk") > 0

// Item Equip Helper
var toEquipL
toEquipL = ""
var toEquipR = ""
toEquipR = ""
var toEquip = ""
toEquip = ""
var shouldActivateR
shouldActivateR = false
var shouldActivateL
shouldActivateL = false

func SetEquipL(itemName)
  toEquipL = itemName
  toEquip = ""

func SetEquipR(itemName)
  toEquipR = itemName
  toEquip = ""

func SetEquip(itemName)
  toEquipL = ""
  toEquipR = ""
  toEquip = itemName

func EquipSet(set) 
  SetEquipL(set[0])
  SetEquipR(set[1])

func ActivateItem()
  shouldActivateR = true
func ActivateLeft()
  shouldActivateL = true

func EquipItems()
  ?toEquipL
    equipL @toEquipL@
  ?toEquipR
    equipR @toEquipR@
  ?toEquip
    equip @toEquip@

func ActivateItems()
  ?shouldActivateR & CanUseItem()
    activate R
  ?shouldActivateL & CanUseItem()
    activate L

// Moondialling
var mdc = 0
func MoondialIf(set, condition)
  ?condition
    MoondialSet(set)
  :
    EquipSet(set)
func MoondialSet(set)
  Moondial(set[0], set[1])
func Moondial(equip1,equip2)
  ?mdc = 1
    SetEquipL("moon")
    SetEquipR(equip1)
  ?mdc = 2
    SetEquipL("moon")
    SetEquipR(equip2)
  ?mdc = 3
    SetEquipL(equip1)
    SetEquipR(equip2)
    mdc = 0
  mdc++

func MoonjuggleSet(set)
  Moonjuggle(set[0], set[1])
func Moonjuggle(equip1,equip2)
  // >`0,13,J:@mdc@ @equip1@ @equip2@
  ?mdc = 0
    SetEquipL(equip2)
    SetEquipR(equip1)
  ?mdc = 1
    SetEquipL("moon")
    SetEquipR(equip1)
  ?mdc = 2
    SetEquipL(equip2)
    SetEquipR(equip1)
  ?mdc = 3
    SetEquipL(equip2)
    SetEquipR("moon")
    mdc = 0
  mdc++

// Cross lookup
func xLookup(val, arr1, arr2)
  var index = arr1.IndexOf(val)
  ?index > -1
    return arr2[index]
  :
    return false

func DictVal(dict, dictKey)
  for i = 0 .. dict.Count()-1
    var value = dict[i]
    ?value[0] = dictKey
      return value[1]

// Potion Funcs
func BrewBerserk()
  ?loc.begin
    brew wood + bronze

func BrewLucky()
  ?loc.begin
    brew stone + bronze

func BrewStrength()
  ?loc.begin
    brew stone

func UseHealth(hp_threshold)
  ?loc.begin
    brew tar
  ?hp < hp_threshold
    activate potion

func UsePot()
  ?item.potion ! empty
    activate potion
func UsePotWhen(condition)
  ?item.potion ! empty & condition
    activate potion

// Misc Functions
func EquipDash()
  ?ItemCD("bash") <= 0 
    SetEquipR("bashing shield")
  :?ItemCD("dash") <= 0
    SetEquipR("dashing shield")

func InDashRange()
  return FoeBetween(11,16)

func EquipDashInRange()
  ?InDashRange()
    EquipDash()
    return true
  return false

// Uses chill until fully chilled
func EquipChillSwordsOr(set)
  ?CanApplyDebuf("debuff_chill")
    MoondialSet(chillSwords)
  :
    EquipSet(set)

func EquipSwordSet(rune)
  EquipSet(DictVal(elementalSwordDict,rune))

func PickupWhenClose()
  ?pickup.distance < 10
    ?loopCount = 0 & shouldPermaPot
      SetEquipL("star")
    :
      SetEquipR("star")

func CanApplyDebuf(debuff)
  ?(foe = "immune_to_" + debuff)
    return false
  var stack = foe.debuffs.GetCount(debuff)
  ?debuff = "debuff_chill"
    return stack < 6
  return foe.debuffs.string ! debuff

func IsMushroomBoss()
  return foe = mushroom_boss |
  ^foe = mushroom_boss_fat | 
  ^foe = mushroom_boss_skinny

// ABILITIES
func BardicheAbility()
  var cooldown = ItemCD("bardiche")
  ?FoeWithin(10) &
  ^cooldown <= 0 | cooldown > 870
    SetEquip("bardiche")
    ActivateItem()
    return true
  return false

func HammerAbility()
  var cooldown = ItemCD("hammer")
  ?cooldown <= 0 | cooldown > 640
    SetEquip("heavy hammer")
    ActivateItem()
    return true
  return false

var qtrTimer = 0
func QtrDash()
  ?foe.distance <= 16
    return
  var cooldown = ItemCD("quarterstaff")
  // Keep equipped
  ?qtrTimer ! 0
    SetEquip("quarterstaff")
    qtrTimer++
    ?qtrTimer > 2
      qtrTimer = 0
      
  // Use 
  :?cooldown <= 0 &
  ^CanUseItem()
    SetEquip("quarterstaff")
    ActivateItem()
    qtrTimer++

// Double-screen BFG/Smite
var scrolling = 0
func DoubleBlade()
  var bladeReady = ItemCD("blade") <= 0
  ?bladeReady & foe.count > 3
    scrolling++
    screen.Next()
  :
    scrolling = 0
    screen.ResetOffset()
  ?bladeReady & 
  ^FoeWithin(25) & 
  ^(foe.count > 5 | scrolling > 15)
    SetEquip("blade")
    ActivateItem()
    return true
  return scrolling > 0

func FireTalisman()
  var cooldown = ItemCD("fire_talisman")
  ?cooldown > 130
    SetEquipR("fire talisman")
    return true
  ?summon.count = 0 & cooldown <= 0 &
  ^CanUseItem()
    SetEquipR("fire talisman")
    ActivateItem()
    return true
  return false

func AetherTalisman(leftHand)
  var cooldown = ItemCD("aether_talisman")
  ?cooldown > 130
    ?leftHand
      SetEquipL("aether talisman")
    :
      SetEquipR("aether talisman")
    return true
  ?summon.count = 0 & cooldown <= 0 &
  ^CanUseItem()
    ?leftHand
      SetEquipL("aether talisman")
      ActivateLeft()
    :
      SetEquipR("aether talisman")
      ActivateItem()
    return true
  return false

func MaskAbility()
  ?ItemCD("mask") <= 0 
    SetEquip("mask")
    ActivateItem()
    return true
  return false

func RunAAC()
  ?item.left.state = 3
    equipL *0 wand //trash
    equipL @item.left@
  ?item.right.state = 3
    equipR *0 shield //trash
    equip @item.right@

// LOCATIONS

// ===================
// Rocky Plateau
// ===================
func Rocky()
  BrewLucky()
  shouldPermaPot = true

  ?loopCount = 0
    UsePot()
  // use it end of stage, arbitrary number
  // find a better way to do this
  :?time > 2000 
    UsePot()

  SetEquipL("triskelion")
  ?!ai.enabled | ai.paused
    SetEquipL("quest")
  SetEquipR("compound shield")

  ?pickup.distance < 10
    ?loopCount = 0
      SetEquipL("star")
    :
      SetEquipR("star")

  // dash whenever, dont interrupt bardiche dash
  ?loopCount ! 0 & (!foe | 
    ^foe = acronian_scout | !FoeWithin(30))
    QtrDash()

  ?FoeWithin(16) & foe = acronian_scout
    RockyMiniboss()
  // 18 dysa waypoint
  // no foe during some part of transition
  :?(FoeWithin(18) & foe = dysangelos) | 
    ^hasEncountedBoss
    hasEncountedBoss = true
    RockyBoss()

func RockyMiniboss()
  ?EquipDashInRange()
    return
  ?canChill
    MoondialIf(chillSwords, loopCount ! 0)
  :?hp < maxhp
    EquipSet(healingSwords)
  :
    MoondialIf(fireSwords, loopCount ! 0)

func RockyBoss()
  ?loopCount ! 0
    // 20f window after waypoint
    // Before cutscene, Hammer
    var hammerStates = [100, 101, 102]
    ?hammerStates.Contains(foe.state) & 
    ^FoeWithin(18) 
      ?HammerAbility()
        return

    // Probably ideal to use the potion here for
    // multiplier
    // After first cutscene, bardiche
    ?foe.state = 118
      QtrDash()
      EquipDashInRange()
      BardicheAbility()
      return
    // After other cutscenes, hammer
    ?foe.state = -1 // not sure if i cooked
      ?HammerAbility()
        return

  // transitions
  var transStates = [-1,102,124,117,127,116]
  ?transStates.Contains(foe.state) |
  // 107 is a transition but also attack
  ^foe.state = 107 & foe = elementalist
    SetEquipL("quest") // bit of armour
    return

  // Phase 1
  ?foe = dysangelos_bearer
    ?foe.state = 101
      return

    ?EquipDashInRange()
      return

    ?canChill
      MoondialIf(chillSwords, loopCount ! 0)
    :?hp < maxhp - 40
      EquipSet(healingSwords)  
    : 
      MoondialIf(fireSwords, loopCount ! 0)

  // Phase 2
  ?foe = dysangelos_elementalist
    ?EquipDashInRange()
      return

    // Moondialling
    ?weakRune = "fire" & loopCount ! 0
      MoondialSet(fireSwords)
    // Attack
    :
      EquipSwordSet(weakRune)

  // Phase 3
  ?foe = dysangelos_perfected
    UsePot() // crit mult
    
    // Dodge sky laser
    ?foe.state = 115 & foe.time > 60
      SetEquipL("mind")
      return

    // Dodge shield swipe
    ?foe.state = 32 & foe.time > 60 & 
    ^foe.damage <= 1
      SetEquipL("mind")
      return

    ?EquipDashInRange()
      return

    var weakness = FindDysaWeakness()
    // Chill
    ?canChill
      MoondialIf(chillSwords, loopCount ! 0)
    // Delete armor 
    :?foe.armor > 0
      EquipSet(armorHammers)
    // Heal
    :?hp < maxhp & foe.buffs.string ! vigor
      EquipSet(healingSwords)
    // Moondialling
    :?weakness = "fire" & loopCount ! 0
      MoondialSet(fireSwords)
    // Attack
    :
      EquipSwordSet(weakness)

    // use mask ability to nerf damage
    ?foe.state = 32 & foe.time > 50
      MaskAbility()

// For Phase 3 - gets strong to some elements
func FindDysaWeakness()
  ?foe.buffs.string ! "fire"
    return "fire"
  :?foe.buffs.string ! "ice"
    return "ice"
  :?foe.buffs.string ! "aether"
    return "aether"
  :?foe.buffs.string ! "vigor"
    return "vigor"
  :
    return "poison"

// ===================
// Deadwood Canyon
// ===================
func Deadwood()

  shouldPermaPot = true
  BrewBerserk()

  ?shouldPermaPot
    ?loopCount = 0 
      UsePot()
    // use it end of stage, arbitrary number
    // find a better way to do this
    :?time > 2000 
      UsePot()
    
  ?AetherTalisman(loopCount = 0)
    return

  SetEquipL("triskelion")
  SetEquipR("compound shield")
  PickupWhenClose()

  // Miniboss
  ?(foe = wasp | foe = wasp_nest) & 
  ^FoeWithin(16)
    DeadwoodMinibosss()
    return
  // Boss
  ?foe = boss & FoeWithin(16)
    DeadwoodBoss()
    return

  // General
  // ?loopCount ! 0 | !shouldPermaPot
  //   DoubleBlade()

  ?FoeWithin(16)   
    ?EquipDashInRange()
      return

    ?loopCount = 0 & shouldPermaPot
      ?foe = scarab
        SetEquipL("fire sword")
      :
        SetEquipL("stone wand")
    :
      DeadwoodStutterStep()

func DeadwoodStutterStep()
  ?foe.distance <= 6
    SetEquip("skeleton")
  :?foe.distance <= 10
    // smoothcast or whatever
    ?time % 2 = 0
      SetEquipR("triskelion")
      SetEquipL("sword")
    :
      SetEquipR("hatchet")
      SetEquipL("sword")
  :
    SetEquipL("triskelion")


func DeadwoodMinibosss()
  ?EquipDashInRange()
    return

  ?loopCount = 0
    activate voidweaver
  :
    DeadwoodStutterStep()

func DeadwoodBoss()
  ?foe = poena
    DeadwoodWitchBoss()
  :?foe = tree_boss
    DeadwoodTreeBoss()

func DeadwoodWitchBoss()
  // trans
  ?foe.state = 1
    ?MaskAbility()
      return
    ?BardicheAbility()
      return
    // ?HammerAbility()
    //   return

  // dont bash
  ?InDashRange()
    ?ItemCD("dash") <= 0
      SetEquipR("dashing shield")
      return

  ?loopCount = 0
    EquipSet(stunlock)
  :
    SetEquip("skeleton")


func DeadwoodTreeBoss()
  ?EquipDashInRange()
    return  
  
  ?loopCount = 0
    ?canChill
      SetEquipL("ice sword dI")
    :
      SetEquipL("fire sword")
  :
    ?canChill
      MoondialSet(chillSwords)
    :
      SetEquip("skeleton")
      

// ===================
// Caves of Fear
// ===================
func Caves()
  BrewLucky()

  SetEquipL("triskelion")
  SetEquipR("ice shield")
  PickupWhenClose()

  // Miniboss - whys it called that
  ?foe = cool_bat & FoeWithin(16)
    CavesMiniBoss()
    return
  // Boss
  ?foe = spider_boss & FoeWithin(16)
    CavesBoss()
    return

  // General
  DoubleBlade()

  ?EquipDashInRange()
    return

  ?FoeWithin(16) 
    ?smiteStack ! 0
      EquipSet(chillWands)
    :
      EquipSet(iceWands)

func CavesMiniBoss()
  ?EquipDashInRange()
    return

  MoondialSet(chillSwords)
  //EquipSet(stunlock)

func CavesBoss()
  UsePot()
    
  // Dodge
  ?foe.state = 142 & foe.time = 60
    SetEquipL("mind")
    return

  MaskAbility()

  SetEquip("ice crossbow")

// ===================
// Mushroom forest
// ===================
func Mushroom()
  BrewLucky()

  SetEquipL("triskelion")
  SetEquipR("poison shield")

  ?AetherTalisman(false)
    return

  ?EquipDashInRange()
    return

  // Boss
  ?IsMushroomBoss() & FoeWithin(16)
    hasEncountedBoss = true
    MushroomBoss()
    return

  // Miniboss
  ?foe = boss & FoeWithin(16)
    EquipChillSwordsOr(poisonSwords)
    return

  DoubleBlade()

  ?FoeWithin(16)
    EquipSet(poisonWands)
  

func MushroomBoss() 
  UsePot()

  ?foe = mushroom_boss_fat
    MaskAbility()
    
  EquipChillSwordsOr(poisonSwords)
  BardicheAbility()   

  ?foe ! mushroom_boss
    QtrDash()

// ===================
// Haunted Halls
// ===================
func Halls()
  BrewLucky()

  SetEquipL("triskelion")
  SetEquipR("vigor shield")

  ?loc.stars <= 5
    Halls5()
    return

  // Boss
  ?foe = pallas & FoeWithin(16)
    HallsBoss()
    return

  // Miniboss
  ?foe = spawner & foe = boss &
  ^FoeWithin(16)
    EquipChillSwordsOr(vigorSwords)
    return

  // General
  DoubleBlade()

  ?EquipDashInRange()
    return

  ?FoeWithin(16) 
    EquipSet(chillWands)

// Optimised for 5* - barely faster
func Halls5()
  BrewBerserk()

  ?EquipDashInRange()
    return

  ?foe = boss & FoeWithin(16)
    UsePot()
    MaskAbility()
    EquipSet(vigorSwords)
    return

  ?FoeWithin(16)
    EquipSet(vigorWands)

func HallsBoss()
  UsePot()

  MaskAbility()

  ?EquipDashInRange()
    return

  EquipChillSwordsOr(vigorSwords)

  // deal with skellys
  ?foe.count > 2
    SetEquip("bardiche")

  BardicheAbility()   

// ===================
// Boiling Mine
// ===================     
func Mine()
  ?loc.stars <= 10
    BrewBerserk()
  :
    // Extra armor damage
    BrewStrength()

  SetEquipL("triskelion")
  SetEquipR("aether shield")
  PickupWhenClose()

  // Mini Boss
  ?foe = explode
    MineMiniboss()
    return

  // Boss
  ?foe = boss & FoeWithin(20) &
  ^foe = bronze_guardian
    MineBoss()
    return

  // General
  DoubleBlade()

  ?EquipDashInRange()
    return

  ?FoeWithin(16)
    ?foe.GetCount(10) = 1 & smiteStack = 0
      EquipSet(unmakeSwords)
      return
    ?smiteStack ! 0
      EquipSet(chillWands)
    :
      EquipSet(aetherWands)
        
func MineMiniboss()
  ?FoeBetween(11,16)
    SetEquipR("dash") // no bash
  ?FoeWithin(8)
    SetEquipR("mind")

func MineBoss() 
  UsePot()

  MaskAbility()
  
  HammerAbility()
  // Attack
  ?foe.state = 32
    ?foe.time > 15
      SetEquipL("mind")
       SetEquipR("aether shield")
      aiState = 1
  // Cooldown - can melee
  :?foe.state = 33
    ?aiState = 1
      EquipDash()
      ?ItemCD("dash") > 0 |
      ^ItemCD("bash") > 0
        aiState = 2
    :
      EquipSet(unmakeSwords)
      BardicheAbility()
  :
    aiState = 0
    SetEquip("aether crossbow")

// ===================
// Icy Ridge
// ===================
func Icy()
  BrewLucky()

  SetEquipL("triskelion")
  SetEquipR("fire shield")

  ?!foe 
    SetEquipR("mask")

  // Mark boss
  ?foe = yeti & FoeWithin(16)
    hasEncountedBoss = true

  // Boss
  ?hasEncountedBoss & FoeWithin(16) 
    IceBoss()
    return
  
  ?foe = giant ice elemental & 
  ^FoeWithin(16)
    IceMiniboss()
    return

  // General
  DoubleBlade()

  ?EquipDashInRange()
    return

  ?FoeWithin(16)
    // Unmake pillar
    ?(foe = ice_pillar | foe = ice_wall) 
      EquipSet(unmakeSwords)
      return
    
    EquipSet(fireWands)

func IceMiniboss()
  ?EquipDashInRange()
    return

  MoondialSet(fireSwords)

func IceBoss() 
  // intro state
  ?foe.armor > 0
    ?EquipDashInRange()
      return

    MoondialSet(fireSwords)
    return

  UsePot()

  MaskAbility()

  // blowing - fire crossbow is better
  ?foe.state = 133
    EquipSet(fireWands)
    return

  // General strat
  ?EquipDashInRange()
    return

  // ?CanApplyDebuf("debuff_chill")
  //   EquipSet(chillSwords)
  //   return
  // why is it a different name
  ?debuffs.GetCount("debuff_yeti_chill") > 0
    EquipSet(fireSwords)
  :
    MoondialSet(fireSwords)

  HammerAbility()
  BardicheAbility()

// ===================
// Temple 
// ===================
func Temple()
  BrewLucky()

  SetEquipL("triskelion")
  SetEquipR("ice shield")

  // Boss
  ?foe = nagaraja & FoeWithin(16)
    TempleBoss()
    return

  // General
  DoubleBlade()

  ?EquipDashInRange()
    return

  ?FoeWithin(16)
    ?foe = acronian_cultist
      EquipChillSwordsOr(iceSwords)
      return

    ?smiteStack ! 0
      EquipSet(chillWands)
    :
      EquipSet(iceWands)

func TempleBoss()
  UsePot()

  ?foe.state ! 112 & InDashRange()
    EquipDash()
    return

  // Dodge Brick
  ?foe.state = 112 & foe.time = 45
    SetEquipL("mind")
    return

  EquipChillSwordsOr(iceSwords)
  //SetEquip("ice crossbow")

// ===================
// HUD 
// ===================

var bottom = screen.h - 2
func ColorCD(cd)
  ?cd > 0
    return "red"
  return "green"

var usedItems = []
var itemGPs = []
var runGP = 0
func ManageGP()
  ?!usedItems.Contains(item.right)
    usedItems.Add(item.right)
    itemGPs.Add([item.right, item.right.gp])
    runGP += item.right.gp
  ?!usedItems.Contains(item.left)
    usedItems.Add(item.left)
    itemGPs.Add([item.left, item.left.gp])  
    runGP += item.left.gp
  ?loc.loop
    usedItems.Clear()
    itemGPs.Clear()
    runGP = 0

// Currently just writes over everything
// Will make it a proper display later
func ItemGPHUD()
  var y = 1
  for itemGP : itemGPs
    >`10,@y@,@itemGP[0]@ - @itemGP[1]@
    y++


// Manage Dysangelos splits
var splitStart = 0
var splPhase = 0
func SaveSplit(splitKey)
  var old = storage.Get(splitKey, 99999)
  var newSpl = totaltime - splitStart
  // Overwrite best split
  ?newSpl < old
    storage.Set(splitKey, newSpl)
  // Save current split
  storage.Set(splitKey + "Cur", newSpl)
  splitStart = 0
  splPhase = 0  

func DysaSplitHUD()
  ?loc ! Rocky
    return

  // Manage splits
  ?loc.begin | loc.loop
    storage.Delete("p1SplitCur")
    storage.Delete("p2SplitCur")
    storage.Delete("p3SplitCur")

  // save splits
  ?splPhase = 1 & foe ! dysangelos_bearer
    SaveSplit("p1Split")
  :?splPhase = 2 & foe ! dysangelos_elementalist
    SaveSplit("p2Split")
  :?splPhase = 3 & foe ! dysangelos_perfected
    SaveSplit("p3Split")

  ?foe = dysangelos_bearer
    ?splitStart = 0
      splitStart = totaltime
      splPhase = 1
  :?foe = dysangelos_elementalist
    ?splitStart = 0
      splitStart = totaltime
      splPhase = 2
  :?foe = dysangelos_perfected
    ?splitStart = 0
      splitStart = totaltime
      splPhase = 3

  // Draw splits
  var x = screen.w - 18
  var y = bottom - 6
  ?splitStart ! 0
    var curSplit = 
    ^TimeDisplay(totaltime - splitStart)
    >`@x@,@y@,Cur: @curSplit@
  y++
  for i = 1 .. 3 
    var splitName = "p" + i + "Split"
    var split = storage.Get(splitName, -1)
    var curSplit = storage.Get
    ^(splitName + "Cur", "-")
    // color based on if new split is better
    var textCol = "#red"
    ?curSplit = "-"
      textCol = "#adadad"
    :?curSplit <= split
      textCol = "#green"

    >`@x@,@y@,P@i@: 
    >`@x + 5@,@y@,@textCol@,@curSplit@F
    >`@x + 10@,@y@,| @split@F
    y++

// TODO, complete list
var potionEffectNames = ["berserk", 
  "lucky_crit"]
func PotionHUD()
  for effect : potionEffectNames
    var x = buffs.GetTime(effect)
    ?x > 0
      return string.Capitalize(effect) + ": " +
      ^x
  return "None"

var oldAverages = []
// Average up/down icon
func AverageIconHUD(average)
  ?loc.loop | loc.begin
    oldAverages.Add(loc.averageTime)

  var lastAverage = loc.averageTime
  ?oldAverages.Count() > 1
    lastAverage = 
    ^oldAverages[oldAverages.Count() - 2]

  var iconX = 8 + string.Size(average)
  ?loc.averageTime > lastAverage
    >`@iconX@,@bottom@,#red,▲
  :?loc.averageTime < lastAverage
    >`@iconX@,@bottom@,#green,▼
  :
    >`@iconX@,@bottom@,#blue,-

func CooldownHUD()
  var x = screen.w - 10
  var x2 = screen.w - 5
  var y = 1
  for abi : allAbilities
    var cd = ItemCD(abi)   
    var text = xLookup(abi,allAbilities,
    ^abilityHUDNames)
    var textCol = ColorCD(cd)

    >`@x@,@y@,#@textCol@,
    ^@string.Capitalize(text)@

    >`@x2@,@y@,#@textCol@,
    ^@time.FormatDigital(cd)@
    y++

var lastTime = 0
var lastTimeTemp = 0

func TimeDisplay(value)
  return FormatTime(value) + " " + 
    ^value + "F"
func TimeHUD()
  // set last time
  ?lastTimeTemp > totaltime
    lastTime = lastTimeTemp
  lastTimeTemp = totaltime

  var current = TimeDisplay(totaltime)
  var last = TimeDisplay(lastTime)
  var best = TimeDisplay(loc.bestTime)
  var average = TimeDisplay(loc.averageTime)

  >`0,@bottom - 3@,Cur:
  >`7,@bottom - 3@,@current@

  >`0,@bottom - 2@,Last:
  >`7,@bottom - 2@,@last@

  >`0,@bottom - 1@,Best:
  >`7,@bottom - 1@,@best@

  >`0,@bottom@,Avg:
  >`7,@bottom@,@average@
  AverageIconHUD(average)

var lastFPSTime = time.msbn
var frameCount = 0
var fps = 0
func CalculateFPS()
  frameCount++
  var nowTime = time.msbn
  // stupid int cast
  var elapsed = int.Parse
  ^(nowTime.Sub(lastFPSTime).ToString())
  ?elapsed >= 1000
    fps = Math.RoundToInt(frameCount / 
    ^(elapsed / 1000.0))
    frameCount = 0
    lastFPSTime = time.msbn

func HUD()
  // Disable utility belt
  disable hud u 

  CooldownHUD()

  // Misc states
  >`0,6,State: @foe.state@ Time: @foe.time@
  ^ Damage: @foe.damage@
  >`0,7,Dist: @foe.distance@
  >`0,8,X: @pos.x@
  >`0,9,Foe Count: @foe.count@
  >`0,10,Loop GP: @runGP@
  >`0,11,Potion: @PotionHUD()@
  >`0,12,DPS: @CalculateDPS()@ 

  // More debuggy stuff
  // >`0,13,L: @toEquipL@ R: @toEquipR@ B: 
  // ^@toEquip@
  // >`0,14,foe: @foe@

  // Item GPs
  //ItemGPHUD()

  CalculateFPS()
  >`28,@screen.h - 1@,@fps@ FPS

  TimeHUD()
  DysaSplitHUD()

func Main()
  // Always run animation cancel
  RunAAC()

  ?loc.begin | loc.loop
    ResetGlobals()

  ?loc.loop
    loopCount++

  // Default 
  SetEquipL("triskelion")
  SetEquipR("ouroboros")
  PickupWhenClose()

  ?loc = Rocky
    Rocky()
  :?loc = Deadwood
    Deadwood()
  :?loc = Caves
    Caves()
  :?loc = Mushroom
    Mushroom()
  :?loc = Halls
    Halls()
  :?loc = Mine
    Mine()
  :?loc = Icy
    Icy()
  :?loc = Temple
    Temple()

  var ppRun = shouldPermaPot & loopCount = 0

  // always use potion when available
  // ?shouldPermaPot
  //   UsePot()

  // mask when permapotting
  ?ppRun
    SetEquipR("mask")
  // abilities when not permapotting
  :
    // always dash
    ?loc ! Rocky
      QtrDash()

    // No deadwood - poena bites 
    ?loc ! Deadwood & loc ! Mushroom
      FireTalisman()

  EquipItems()
  ActivateItems()

  ManageGP()
  HUD()

Main()

// SLIME PET COSMETIC - pls fix web imports
// import SlimePet